// Code generated by MockGen. DO NOT EDIT.
// Source: internal/components/eth_scan_cli.go

// Package mock_components is a generated GoMock package.
package mock_components

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	components "github.com/jaime1129/fedex/internal/components"
)

// MockEthScanCli is a mock of EthScanCli interface.
type MockEthScanCli struct {
	ctrl     *gomock.Controller
	recorder *MockEthScanCliMockRecorder
}

// MockEthScanCliMockRecorder is the mock recorder for MockEthScanCli.
type MockEthScanCliMockRecorder struct {
	mock *MockEthScanCli
}

// NewMockEthScanCli creates a new mock instance.
func NewMockEthScanCli(ctrl *gomock.Controller) *MockEthScanCli {
	mock := &MockEthScanCli{ctrl: ctrl}
	mock.recorder = &MockEthScanCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthScanCli) EXPECT() *MockEthScanCliMockRecorder {
	return m.recorder
}

// GetLatestBlock mocks base method.
func (m *MockEthScanCli) GetLatestBlock() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockEthScanCliMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockEthScanCli)(nil).GetLatestBlock))
}

// QueryBlock mocks base method.
func (m *MockEthScanCli) QueryBlock(blockNumber string) (*components.EthScanBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlock", blockNumber)
	ret0, _ := ret[0].(*components.EthScanBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlock indicates an expected call of QueryBlock.
func (mr *MockEthScanCliMockRecorder) QueryBlock(blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockEthScanCli)(nil).QueryBlock), blockNumber)
}

// QueryHistoricalTrxs mocks base method.
func (m *MockEthScanCli) QueryHistoricalTrxs(req *components.QueryHistoricalTrxsReq) (*components.QueryHistoricalTrxsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHistoricalTrxs", req)
	ret0, _ := ret[0].(*components.QueryHistoricalTrxsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHistoricalTrxs indicates an expected call of QueryHistoricalTrxs.
func (mr *MockEthScanCliMockRecorder) QueryHistoricalTrxs(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHistoricalTrxs", reflect.TypeOf((*MockEthScanCli)(nil).QueryHistoricalTrxs), req)
}

// QueryTrxFee mocks base method.
func (m *MockEthScanCli) QueryTrxFee(trxHash string) (*components.EthScanTrxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTrxFee", trxHash)
	ret0, _ := ret[0].(*components.EthScanTrxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrxFee indicates an expected call of QueryTrxFee.
func (mr *MockEthScanCliMockRecorder) QueryTrxFee(trxHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrxFee", reflect.TypeOf((*MockEthScanCli)(nil).QueryTrxFee), trxHash)
}
